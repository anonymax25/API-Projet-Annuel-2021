# This workflow will build a docker container, publish it to Azure Container Registry, and deploy it to ACR when a release is created

name: Build and Deploy Code executor to Azure

on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - "master"

# Environment variables available to all jobs and steps in this workflow
env:
  GITHUB_SHA: ${{ github.sha }}
  REGISTRY_HOSTNAME: .azurecr.io
  IMAGE_NAME: executor
  REGISTRY_NAME: ${{ secrets.REGISTRY_NAME }}
  REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}

  AKS_RESOURCE_GROUP: ${{ secrets.AKS_RESOURCE_GROUP }}
  AKS_CLUSTER_NAME: ${{ secrets.AKS_CLUSTER_NAME }}
  DEPLOYMENT_NAME: executor
  VERSION: v1

  PORT: 3001 

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy 
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      # Download and Install AZURE CLOUD CLI
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./code-executor
          push: true
          tags: $REGISTRY_NAME/$IMAGE_NAME:$VERSION

      # Deploy the Docker image to the ACR cluster
      # - name: Deploy to ACR
      #   run: |
      #     az aks get-credentials --resource-group $AKS_RESOURCE_GROUP --name $AKS_CLUSTER_NAME
      #     kubectl config current-context
      #     kubectl create deployment $DEPLOYMENT_NAME --image=$REGISTRY_NAME/$IMAGE_NAME:$VERSION --dry-run=client -o yaml > deployment.yaml
      #     kubectl apply -f deployment.yaml
      #     kubectl create service loadbalancer $DEPLOYMENT_NAME --tcp=80:$PORT --dry-run=client -o yaml > service.yaml
      #     kubectl apply -f service.yaml

